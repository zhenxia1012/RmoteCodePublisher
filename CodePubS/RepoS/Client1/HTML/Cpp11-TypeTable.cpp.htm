<!----------------------------------------------------------------------------
   - Html file of source code file from Project #3
  Zhen Xia, CSE687 - Object Oriented Design, Spring 2017
----------------------------------------------------------------------------->
<html>
<head>
    <link rel="stylesheet" type="text/css" href="Publisher.css" />
    <script src="script.js"></script>
</head>
<body>
    <h3 id="filename">Cpp11-TypeTable.cpp</h3>
    <hr />
    <a href="Catalog.htm">[To Main Catalog]</a>
    <hr />
    <div id="dependency" class="indent">
        <h4>Dependencies:</h4>
        <a href="Cpp11-TypeTable.h.htm">Cpp11-TypeTable.h</a>
    </div>
    <hr />
<pre id="code">
///////////////////////////////////////////////////////////////
// Typetable.cpp - structure for store the type information  //
//                 from file collection and it is the base   //
//                 for dependency analysis                   //
// Language:    Visual C++                                   //
// Platform:    Alienware15, Windows 10                      //
// Author:      Zhen Xia, CIS687, Syracuse University        //
///////////////////////////////////////////////////////////////
#include &lt;iomanip&gt;
#include "TypeTable.h"

using namespace CodeAnalysis;

///////////////////////////////////////////////////////////////
// class: TableRecord - record analysis of a file,e.g, class, 
//                      function, enum, etc.
//
//----&lt; default initialization for TableRecord &gt;------------------------

TableRecord::TableRecord()
<button id="0" type="button" onclick="expand(0,1)">-</button>	: type_("anonymous"), parentType_("namespace"), name_("none"), namespace_("Global Namespace") <span id = "1">{}</span>

//----&lt; initialization accepting type and name &gt;------------------------

TableRecord::TableRecord(const Property& type, const Property& name)
<button id="2" type="button" onclick="expand(2,3)">-</button>	: type_(type), parentType_("namespace"), name_(name), namespace_("Global Namespace") <span id = "3">{}</span>

TableRecord::~TableRecord()
<button id="4" type="button" onclick="expand(4,5)">-</button><span id = "5">{
}</span>
//----&lt; returns string with TableRecord description &gt;--------------------

std::string TableRecord::show(bool details)
<button id="6" type="button" onclick="expand(6,7)">-</button><span id = "7">{
	std::ostringstream temp;
	temp &lt;&lt; "\n  ";
	temp.setf(_IOSleft);
	temp &lt;&lt; std::setw(16) &lt;&lt; type_;
	temp.setf(_IOSleft);
	temp &lt;&lt; std::setw(18) &lt;&lt; parentType_;
	temp.setf(_IOSleft);
	temp &lt;&lt; std::setw(30) &lt;&lt; name_;
	temp.setf(_IOSleft);
	temp &lt;&lt; std::setw(16) &lt;&lt; package_;
	temp.setf(_IOSleft);
	temp &lt;&lt; std::setw(20) &lt;&lt; namespace_;
	temp.setf(_IOSleft);
	temp &lt;&lt; path_;
	return temp.str();
}</span>
///////////////////////////////////////////////////////////////
// class: TypeTable - record files information with all file
//                    analysis
//
//----&lt; constructor &gt;----------------------------------------------------

TypeTable::TypeTable(const Property& name)
<button id="8" type="button" onclick="expand(8,9)">-</button>	: tablename(name) <span id = "9">{}</span>
//----&lt; deconstructor &gt;--------------------------------------------------

TypeTable::~TypeTable()
<button id="10" type="button" onclick="expand(10,11)">-</button><span id = "11">{
	for (auto item : tablerecords)
		delete item;
}</span>
//----&lt; get type table of records &gt;--------------------------------------

std::vector&lt;TableRecord *&gt;& TypeTable::getTable()
<button id="12" type="button" onclick="expand(12,13)">-</button><span id = "13">{
	return tablerecords;
}</span>
//----&lt; add table record &gt;-----------------------------------------------

void TypeTable::addRecord(TableRecord* tablerecord)
<button id="14" type="button" onclick="expand(14,15)">-</button><span id = "15">{
	tablerecords.push_back(tablerecord);
}</span>
//----&lt; show content of the table &gt;--------------------------------------

std::string TypeTable::show()
<button id="16" type="button" onclick="expand(16,17)">-</button><span id = "17">{
	std::ostringstream temp;
	temp &lt;&lt; "\n\n  Table Name: " &lt;&lt; tablename &lt;&lt; "\n  ";
	temp.setf(_IOSleft);
	temp &lt;&lt; std::setw(16) &lt;&lt; "Type";
	temp.setf(_IOSleft);
	temp &lt;&lt; std::setw(18) &lt;&lt; "Parent Type";
	temp.setf(_IOSleft);
	temp &lt;&lt; std::setw(30) &lt;&lt; "Name";
	temp.setf(_IOSleft);
	temp &lt;&lt; std::setw(16) &lt;&lt; "Package";
	temp.setf(_IOSleft);
	temp &lt;&lt; std::setw(20) &lt;&lt; "Name Space";
	temp.setf(_IOSleft);
	temp &lt;&lt; std::setw(8) &lt;&lt; "Path";
	temp &lt;&lt; "\n  ";
	temp.fill('-');
	temp &lt;&lt; std::setw(150) &lt;&lt; "";
	for (auto item : tablerecords)
		temp &lt;&lt; item-&gt;show();
	//TreeWalk(tablerecords[0]);
	return temp.str();
}</span>
#ifndef TypeTable_H
#define TypeTable_H

#include "../Utilities/Utilities.h"

using Utils = Utilities::StringHelper;

void main()
<button id="18" type="button" onclick="expand(18,19)">-</button><span id = "19">{
	Utils::Title("Testing TypeTable, FileTable, TableRecord");

	TableRecord* pN = new TableRecord("namespace", "Global Namespace");
	pN-&gt;namespace_ = "Global Namespace";
	pN-&gt;package_ = "file1";
	pN-&gt;path_ = "./file1";
	TableRecord* pX = new TableRecord("class", "X");
	pX-&gt;namespace_ = "Global Namespace";
	pX-&gt;package_ = "file1";
	pX-&gt;path_ = "./file1";
	pX-&gt;parentType_ = pN-&gt;type_;
	TableRecord* pf1 = new TableRecord("function", "f1");
	pf1-&gt;namespace_ = "Global Namespace";
	pf1-&gt;package_ = "file1";
	pf1-&gt;path_ = "./file1";
	pf1-&gt;parentType_ = pX-&gt;type_;
	TableRecord* pc1 = new TableRecord("control", "if");
	pc1-&gt;namespace_ = "Global Namespace";
	pc1-&gt;package_ = "file1";
	pc1-&gt;path_ = "./file1";
	pc1-&gt;parentType_ = pf1-&gt;type_;
	TableRecord* pf2 = new TableRecord("function", "f2");
	pf2-&gt;namespace_ = "Global Namespace";
	pf2-&gt;package_ = "file1";
	pf2-&gt;path_ = "./file1";
	pf2-&gt;parentType_ = pX-&gt;type_;

	TypeTable* tb = new TypeTable("C++ Table");
	tb-&gt;addRecord(pN);
	tb-&gt;addRecord(pX);
	tb-&gt;addRecord(pf1);
	tb-&gt;addRecord(pc1);
	tb-&gt;addRecord(pf2);
	std::cout &lt;&lt; "\n  " &lt;&lt; tb-&gt;show();

}</span>
#endif
</pre>
</body>
</html>